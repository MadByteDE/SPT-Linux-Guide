#!/usr/bin/env bash

# # # # # # # # # 
# SPT-INSTALLER #
# # # # # # # # # 

TITLE="spt-installer"
AUTHOR="MadByte"
LICENSE="MIT"
VERSION="0.3.1"
DATE="2025-08-19"

# ANSI codes
BOLD="\e[1m"; UNDERLINE="\e[2m"; RESET="\e[0m"
RED="\e[31m"; GREEN="\e[32m"; BLUE="\e[36m"
YELLOW="\e[33m"; GRAY="\e[90m"

# Dependency download URLs
declare -A URL
URL[umu-launcher]="https://github.com/Open-Wine-Components/umu-launcher/releases/download/1.2.9/umu-launcher-1.2.9-zipapp.tar"
URL[bsg-launcher]="https://prod.escapefromtarkov.com/launcher/download"
URL[spt-installer]="https://ligma.waffle-lord.net/SPTInstaller.exe"
URL[server-script]="https://raw.githubusercontent.com/MadByteDE/SPT-Linux-Guide/refs/heads/SPTv4-dev/scripts/launch-server.sh"
URL[bsg-launcher-ico]="https://cdn2.steamgriddb.com/icon/33686c2d8930be81c843ffb7d4312605/32/256x256.png"
URL[spt-launcher-ico]="https://cdn2.steamgriddb.com/icon_thumb/ddd4f86cd0f978e85155cfa6c9f94e0c.png"
URL[spt-server-ico]="https://cdn2.steamgriddb.com/icon_thumb/9f7431ea593b8e57401c08f40adc6e34.png"
URL[installer-script]="https://raw.githubusercontent.com/MadByteDE/SPT-Linux-Guide/refs/heads/SPTv4-dev/scripts/spt-installer"
URL[discord]="https://discord.com/invite/Xn9msqQZan"
URL[guide-repo]="https://github.com/MadByteDE/SPT-Linux-Guide"
readonly -A URL

# We don't want to run as root
if [[ "$(id -u)" -eq 0 ]]; then
    echo "This script is not supposed to be run as root!"
    exit 1
fi

# Shell options
shopt -s extglob

# Make sure to throw an error on SIGINT
trap int INT; int() { err "Interrupt received"; }


m_exit() {
    local status
    status=${1:-$?}

    # Remove temp files
    [[ -d "${TMP_DIR}" ]] && m_rm -r "${TMP_DIR}"

    # Exit with passed status code
    exit "${status}"
}


m_chmod() {
    chmod "$@" &>> "${LOG_PATH}" || err "Command '$*' failed (status code $?)"
}


m_rm() {
    rm "$@" &>> "${LOG_PATH}" || err "Command '$*' failed (status code $?)"
}


m_curl() {
    curl --connect-timeout 30 -f "$@" &>> "${LOG_PATH}" || err "Command '$*' failed (status code $?)"
}


m_umu-run() {
    "${UMU_PATH}" "$@" &>> "${LOG_PATH}" || err "Command '$*' failed (status code $?)"
}


msg() {
    local filtered_str output
    output="${GRAY}[$TITLE]${RESET} ${*}"
    filtered_str=$(echo -e "${output}" | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g')

    # Show in terminal & write to log
    echo -e "${output}"
    echo "${filtered_str}" &>> "${LOG_PATH}"
}


err() {
    local status pfx
    status=$?
    pfx="${BOLD}${RED}ERROR: ${RESET}"
    msg "${pfx}$1"
    msg "${pfx}See '${CACHE_DIR}/installer.log' for more details.${RESET}"
    m_exit ${status}
}


ask() {
    printf "${GRAY}[${TITLE}]${RESET} $* [y/n] "
    while true; do
        read -r -p "> " yn
        case $yn in
            [Yy]*) return 0 ;;  
            [Nn]*) msg "Aborted"; m_exit 0 ;;
        esac
    done
}


init_paths() {
    # System directories
    DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
    DATA_DIR="${DATA_HOME}/${TITLE}" && mkdir -p "${DATA_DIR}"
    CACHE_DIR="${XDG_CACHE_HOME:-${HOME}/.cache}/${TITLE}" && mkdir -p "${CACHE_DIR}"
    CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}/${TITLE}" && mkdir -p "${CONFIG_DIR}"
    TMP_DIR="${CACHE_DIR}/tmp" && mkdir -p "${TMP_DIR}"
    ICO_DIR="${DATA_HOME}/icons/hicolor/256x256/apps" && mkdir -p "${ICO_DIR}"
    APP_DIR="${DATA_HOME}/applications"

    # Prefix directories
    PFX_DIR="${PFX_DIR:-"${HOME}/Games/tarkov"}"
    SPT_DIR="${PFX_DIR}/drive_c/SPTarkov"
    BSG_DIR="${PFX_DIR}/drive_c/Battlestate Games"
    EFT_DIR="${BSG_DIR}/Escape from Tarkov"

    # File path variables
    LOG_PATH="${CACHE_DIR}/installer.log"
    SCRIPT_PATH="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" && pwd )"
    UMU_PATH=$(command -v umu-run || echo "${DATA_DIR}/umu/umu-run")
    PFX_CONF_PATH="${CONFIG_DIR}/prefix.conf"
}


load_prefix_path() {
    # Load prefix path from prefix.conf file or fallback to default path
    local prefix_path
    prefix_path="$(cat "${PFX_CONF_PATH}" 2>/dev/null || echo "${PFX_DIR}")"
    opt_setprefix "${prefix_path}"
}


install_umu() {
    msg "Downloading UMU Launcher..."
    
    # Download zipapp archive
    cd "${TMP_DIR}" || exit
    m_curl -LO "${URL[umu-launcher]}"

    # Extract & remove when done
    tar -xf "$(ls -- !("zipapp.tar"))" -C "../" || err "Failed to extract umu-launcher archive"
}


install_tarkov() {
    # Get prefix path (cached/default) and validate it
    load_prefix_path

    if [[ ! -d "${PFX_DIR}" ]]; then
        # Initialize prefix
        msg "Initializing wine prefix..."
        m_umu-run wineboot -u || err "Failed to initialize wine prefix"
    fi

    # Install game dependencies
    if ! cat "${PFX_DIR}/winetricks.log" 2>/dev/null | grep -q "dotnet48"; then
        msg "Installing .NET 4.8 Runtime (this might take a while)..."
        m_umu-run winetricks -q dotnet48
    fi

    if ! cat "${PFX_DIR}/winetricks.log" | grep -q "vcrun2022"; then
        msg "Installing Microsoft Visual C++ 2015-2022 Redistributable..."
        m_umu-run winetricks -q vcrun2022
    fi

    # Add prefix update pop-up workaround
    msg "Adding window pop-up workaround..."
    m_umu-run reg add "HKLM\\Software\\Microsoft\\.NETFramework" /v "OnlyUseLatestCLR" /t "REG_DWORD" /d 0001 /f

    # Add mouse focus workaround
    msg "Adding mouse focus workaround to registry..."
    m_umu-run reg add "HKCU\\Software\\Wine\\X11 Driver" /v "UseTakeFocus" /t "REG_SZ" /d "N" /f
    
    # Download BSG Launcher if needed
    if [[ ! -f "${DATA_DIR}/BsgLauncher.exe" ]]; then
        msg "Downloading BSG Launcher..."
        cd "${DATA_DIR}" && m_curl -L "${URL[bsg-launcher]}" -o "BsgLauncher.exe"
    fi

    # Install BSG Launcher
    msg "Installing BSG Launcher..."
    m_umu-run "${DATA_DIR}/BsgLauncher.exe" /VERYSILENT

    # Re-initialize prefix for GE-Proton
    msg "Switching Proton version to 'GE-Proton'..."
    export PROTONPATH="GE-Proton"
    m_umu-run wineboot -u

    # Copy icon to user icons directory
    if [[ ! -f "${ICO_DIR}/tarkov.png" ]]; then
        msg "Downloading & installing app icon from SteamGridDB..."
        cd "${ICO_DIR}" && m_curl -L "${URL[bsg-launcher-ico]}" -o "tarkov.png"
    fi

    # Create application shortcut
    local shortcut_path env_vars launch_args 

    msg "Creating application shortcut..."
    shortcut_path="${APP_DIR}/BSG - Launcher.desktop"
    env_vars=()
    env_vars+=("PROTON_USE_XALIA=0")
    env_vars+=("PROTONPATH='GE-Proton'")
    env_vars+=("WINEPREFIX='${PFX_DIR}'")

    launch_args=()
    launch_args+=("--disable-software-rasterizer")

    # Remove existing shortcut
    [[ -f "${shortcut_path}" ]] && m_rm -f "${shortcut_path}"

    # Write desktop file
    {   echo "[Desktop Entry]"
        echo "Categories=Game;ActionGame;Simulation"
        echo "Path=${BSG_DIR}/BsgLauncher"
        echo "Exec=env ${env_vars[*]} ${UMU_PATH} 'C:/Battlestate Games/BsgLauncher/BsgLauncher.exe' ${launch_args[*]}"
        echo "Name=BSG - Launcher"
        echo "Icon=tarkov"
        echo "Type=Application"
    } >> "${shortcut_path}"

    # Make executable
    m_chmod +x "${shortcut_path}"

    msg "${GREEN}Done! ※\(^o^)/※${RESET}"
}


install_spt() {
    # HACK: Needed to run the SPTInstaller.exe
    export DOTNET_BUNDLE_EXTRACT_BASE_DIR=""
    export DOTNET_ROOT=""

    # Get prefix path (cached/default) and validate it
    load_prefix_path

    if  [[ ! -d "${PFX_DIR}" ]]; then
        msg "${YELLOW}Prefix directory at '${PFX_DIR}' does not exist.${RESET}"
        msg "Make sure to install EFT first!"
        err "Wine prefix not found"
    elif [[ ! -d "${EFT_DIR}" ]]; then
        msg "${YELLOW}Looks like Escape from Tarkov is not installed.${RESET}"
        msg "Make sure to install the game client with the BSG Launcher!"
        err "Tarkov game files not found"
    elif [[ -d "${SPT_DIR}" ]]; then
        msg "${YELLOW}SPTarkov directory already exists.${RESET}"
        msg "${YELLOW}If you want to reinstall, make sure to remove the old installation first!${RESET}"
        err "SPTarkov directoy already exists."
    fi

    # Download SPT Installer
    if ! [[ -f "${DATA_DIR}/SPTInstaller.exe" ]]; then
        msg "Downloading SPTInstaller.exe..."
        cd "${DATA_DIR}" && m_curl -LO "${URL[spt-installer]}"
    fi

    # Install dependencies
    if ! cat "${PFX_DIR}/winetricks.log" 2>/dev/null | grep -q "dotnetdesktop8"; then
        msg "Installing .NET Desktop 8 Runtime..."
        m_umu-run winetricks -q dotnetdesktop8
    fi

    if ! cat "${PFX_DIR}/winetricks.log" | grep -q "dotnetdesktop9"; then
        msg "Installing .NET Desktop 9 Runtime..."
        m_umu-run winetricks -q dotnetdesktop9
    fi

    # Add DLL overrides
    msg "Adding DLL overrides to registry..."
    m_umu-run reg add "HKCU\\Software\\Wine\\DllOverrides" /v "winhttp" /t "REG_SZ" /d "native,builtin" /f

    # HACK: UMU-Proton fails to run the SPTInstaller, so we have to switch to GE-Proton instead
    export PROTONPATH="GE-Proton"

    # Run SPT Installer
    msg "Launching SPT Installer..."
    m_umu-run "${DATA_DIR}/SPTInstaller.exe" installpath="C:\\SPTarkov" || err "Failed to launch SPT Installer"

    # Install server launch script
    cd "${SPT_DIR}" && m_curl -LO "${URL[server-script]}"
    m_chmod +x "${SPT_DIR}/launch-server.sh"

    # Copy icon to user icons directory
    if [[ ! -f "${ICO_DIR}/spt_launcher.png" ]] || [[ ! -f "${ICO_DIR}/spt_server.png" ]]; then
        msg "Downloading & installing app icons..."
        cd "${ICO_DIR}" && m_curl -L "${URL[spt-launcher-ico]}" -o "spt_launcher.png"
        cd "${ICO_DIR}" && m_curl -L "${URL[spt-server-ico]}" -o "spt_server.png"
    fi

    # Create application shortcuts
    local shortcut_path env_vars launch_args 
    msg "Creating application shortcuts..."

    # SPT Launcher
    env_vars=()
    env_vars+=("PROTONPATH='GE-Proton'")
    env_vars+=("PROTON_USE_XALIA=0")
    env_vars+=("DOTNET_BUNDLE_EXTRACT_BASE_DIR=")
    env_vars+=("DOTNET_ROOT=")
    env_vars+=("WINEDEBUG='-all,err+all,fixme+all,debugstr+all'")
    env_vars+=("WINEPREFIX='${PFX_DIR}'")

    launch_args=()

    shortcut_path="${APP_DIR}/SPTarkov - Launcher.desktop"

    # Remove existing shortcut
    [[ -f "${shortcut_path}" ]] && m_rm -f "${shortcut_path}"

    # Write desktop file
    {   echo "[Desktop Entry]"
        echo "Categories=Game;ActionGame;Simulation"
        echo "Path=${SPT_DIR}"
        echo "Exec=env ${env_vars[*]} ${UMU_PATH} 'C:/SPTarkov/SPT.Launcher.exe' ${launch_args[*]}"
        echo "Name=SPTarkov - Launcher"
        echo "Icon=spt_launcher"
        echo "Type=Application"
    } >> "${shortcut_path}" && m_chmod +x "${shortcut_path}"
    
    # SPT Server
    shortcut_path="${APP_DIR}/SPTarkov - Server.desktop"

    # Remove existing shortcut
    [[ -f "${shortcut_path}" ]] && m_rm -f "${shortcut_path}"

    # Write desktop file
    {   echo "[Desktop Entry]"
        echo "Categories=Game;ActionGame;Simulation"
        echo "Path=${SPT_DIR}"
        echo "Exec='${SPT_DIR}/launch-server.sh'"
        echo "Name=SPTarkov - Server"
        echo "Icon=spt_server"
        echo "Type=Application"
    } >> "${shortcut_path}" && m_chmod +x "${shortcut_path}"

    msg "${GREEN}Done! ※\(^o^)/※${RESET}"
}


opt_setprefix() {
    PFX_DIR="${1}"

    if [[ -d "${PFX_DIR}" ]]; then
        [[ ! -f "${PFX_DIR}/system.reg" ]] && err "Invalid prefix directory: '${PFX_DIR}'"
    fi

    # Update WINEPREFIX environment variable
    export WINEPREFIX="${PFX_DIR}"

    # Update paths
    init_paths || err "Failed to initialize script paths"

    # Update prefix config file
    echo "${PFX_DIR}" > "${PFX_CONF_PATH}"
    msg "Prefix path has been set to '${1}'"
}


opt_install() {
    local mode="$1"

    # Install umu-launcher if needed
    [[ ! -f "${UMU_PATH}" ]] && install_umu

    case "${mode}" in
        eft)
            msg "Launching Escape from Tarkov setup..."
            install_tarkov
        ;;

        spt)
            msg "Launching SPTarkov setup..."
            install_spt
        ;;

        *)
            err "Invalid argument '${mode}'. (Available options: eft, spt)"
        ;;
    esac
}


opt_uninstall() {
    local mode no_prompt
    mode="$1"
    no_prompt="${2:-$NO_PROMPT}"

    case "${mode}" in
        eft)
            if ! [ "${no_prompt}" = 1 ]; then
                # Warn user before continuing
                msg "${BOLD}This action will uninstall 'Escape from Tarkov' from your system!${RESET}"
                msg "Prefix directory: ${UNDERLINE}${PFX_DIR}${RESET}"
                ask "Do you want to continue?"
            fi

            msg "Uninstalling 'Escape from Tarkov'..."
            [[ -d "${BSG_DIR}" ]] && m_rm -r "${BSG_DIR}"

            msg "Removing shortcut..."
            app_path="${APP_DIR}/BSG - Launcher.desktop"
            [[ -f "${app_path}" ]] && m_rm -f "${app_path}"

            ! [ "${no_prompt}" = 1 ] && msg "${GREEN}Done!${RESET}"
        ;;

        spt)
            if ! [ "${no_prompt}" = 1 ]; then
                msg "${BOLD}This action will uninstall 'SPTarkov' from your system!${RESET}"
                msg "Prefix directory: ${UNDERLINE}${PFX_DIR}${RESET}"
                ask "Do you want to continue?"
            fi

            msg "Uninstalling 'SPTarkov'..."
            [[ -d "${SPT_DIR}" ]] && m_rm -r "${SPT_DIR}"

            msg "Removing shortcuts..."
            local apps app_path
            apps=("SPTarkov - Launcher.desktop" "SPTarkov - Server.desktop")
            
            for app in "${apps[@]}"; do
                app_path="${APP_DIR}/${app}"
                [[ -f "${app_path}" ]] && m_rm -f "${app_path}"
            done

            ! [ "${no_prompt}" = 1 ] && msg "${GREEN}Done!${RESET}"
        ;;

        cache)
            msg "Removing Cache directory..."
            [[ -d "${CACHE_DIR}" ]] && m_rm -r "${CACHE_DIR}"
            ! [ "${no_prompt}" = 1 ] && msg "${GREEN}Done!${RESET}"
        ;;

        data)
            msg "Removing data directory..."
            [[ -d "${DATA_DIR}" ]] && m_rm -r "${DATA_DIR}"
            ! [ "${no_prompt}" = 1 ] && msg "${GREEN}Done!${RESET}"
        ;;

        prefix)
            if ! [ "${no_prompt}" = 1 ]; then
                # Warn user before continuing
                msg "${BOLD}This action will remove the installed wine prefix!${RESET}"
                msg "The following directory will be deleted ${BOLD}permanently${RESET}:"
                msg "${UNDERLINE}${PFX_DIR}${RESET}"
                ask "Do you want to continue?"
            fi

            msg "Removing Prefix directory..."
            [[ -d "${PFX_DIR}" ]] && m_rm -r "${PFX_DIR}"

            ! [ "${no_prompt}" = 1 ] && msg "${GREEN}Done!${RESET}"
        ;;

        wipe)
            if ! [ "${no_prompt}" = 1 ]; then
                # Warn user before continuing
                msg "${BOLD}This action will remove the SPT/EFT wine prefix, all cached files & all game shortcuts!${RESET}"
                msg "The following directories will be deleted ${BOLD}permanently${RESET}:"
                msg "    > ${UNDERLINE}${PFX_DIR}${RESET}"
                msg "    > ${UNDERLINE}${DATA_DIR}${RESET}"
                msg "    > ${UNDERLINE}${CACHE_DIR}${RESET}"
                ask "Do you want to continue?"
            fi

            opt_uninstall "eft" 1
            opt_uninstall "spt" 1
            opt_uninstall "prefix" 1
            opt_uninstall "data" 1
            opt_uninstall "cache" 1
        ;;

        *)
            err "Invalid argument '${OPTARG}'. (Available options: eft, spt, cache, wipe)"
        ;;
    esac
}


opt_selfupdate() {
    if ! [ "${NO_PROMPT}" = 1 ]; then
        msg "${YELLOW}Not fully implemented yet${RESET}"
        msg
        msg "> The script will attempt to download the latest VERSION available here:"
        msg "> ${UNDERLINE}${URL[installer-script]}${RESET}"
        msg
        msg "> This feature is ${BOLD}NOT${RESET} fully implemented yet & won't validate the new script file!"
        msg
        ask "Do you want to continue?"
    fi

    msg "Updating script..."

    
    cd "${SCRIPT_PATH}" && m_curl -LO "${URL[installer-script]}"
    m_chmod +x "${SCRIPT_PATH}"

    ! [ "${no_prompt}" = 1 ] && msg "${GREEN}Done! ※\(^o^)/※${RESET}"
}


opt_help() {
    msg "Standalone EFT/SPT installer script using UMU-Launcher and Proton."
    msg "${BOLD}Example usage: ${YELLOW}spt-installer -p ~/Games/tarkov -i eft${RESET}"
    msg
    msg "${BOLD}OPTIONS:${RESET}"
    msg "   ${BOLD}-i${RESET} (Install)         - Available arguments: eft|spt"
    msg "   ${BOLD}-u${RESET} (Uninstall)       - Available arguments: eft|spt|prefix|data|cache|wipe"                                       
    msg "   ${BOLD}-p${RESET} (Prefix)          - Set a custom path for the wine prefix"
    msg "   ${BOLD}--self-update${RESET}        - Updates this installer script"
    msg "   ${BOLD}--no-prompt${RESET}          - Disable interactive prompt messages"
    msg "   ${BOLD}-h | --help${RESET}          - Print this help message"
    msg "   ${BOLD}-v | --VERSION${RESET}       - Print the VERSION info message"
    msg
    msg "${YELLOW}[!] This script is made by the SPT community & is NOT offically supported by the mod developers!${RESET}"
    msg
    msg "For more details and help, visit:"
    msg "  > ${BOLD}${URL[guide-repo]}${RESET}"
    msg
    msg "Join the SPT Discord server:"
    msg "  > ${BOLD}${URL[discord]}${RESET}"
}


opt_version() {
    msg "${BOLD}Version: ${RESET}${VERSION} (${DATE})"
    msg "${BOLD}Author: ${RESET}${AUTHOR}"
    msg "${BOLD}License: ${RESET}${LICENSE}"
}


handle_opts() {
    # Execute commands
    while getopts ":p:i:u:hv-:" opt; do
        case ${opt} in

            # Prefix option
            p)
                case "${OPTARG}" in
                    -*) msg "Invalid option: -${opt} requires an argument" ;;
                    *) opt_setprefix "${OPTARG}" ;;
                esac
            ;;

            # Install option
            i)
                case "${OPTARG}" in
                    eft|spt) opt_install "${OPTARG}" ;;
                    -*) msg "Invalid option: -${opt} requires an argument" ;;
                    *) err "Invalid argument '${OPTARG}'. (Available options: eft, spt)" ;;
                esac
            ;;

            # Uninstall option
            u)
                case "${OPTARG}" in
                    eft|spt|data|cache|prefix|wipe) opt_uninstall "${OPTARG}" ;;
                    -*) msg "Invalid option: -${opt} requires an argument" ;;
                    *) err "Invalid argument '${OPTARG}'. (Available options: eft|spt|cache|prefix|wipe)" ;;
                esac
            ;;

            h) opt_help ;;
            v) opt_version ;;

            -)
                case "${OPTARG}" in
                    self-update) opt_selfupdate ;;
                    no-prompt) export NO_PROMPT=1; msg "'NO_PROMPT' option set" ;;
                    help) opt_help ;;
                    version) opt_version ;;
                    *)
                        echo "Invalid option: --${OPTARG}"
                        m_exit 1
                    ;;
                esac
            ;;

            \?)
                msg "Invalid option: -${OPTARG}"
                m_exit 1
            ;;

            : )
                msg "Invalid option: -${OPTARG} requires an argument"
            ;;
        esac
    done
}


main() {
    # Environment variable
    export WINEDEBUG="-all,err+all,fixme+all,debugstr+all"
    export WINEPREFIX="${PFX_DIR}"

    # Initalize directory paths
    init_paths || err "Failed to initialize script paths"

    # Remove old log file
    [[ -f "${CACHE_DIR}/installer.log" ]] && m_rm -f "${CACHE_DIR}/installer.log"

    # Handle command line arguments
    handle_opts "$@"
}

# Main entry
main "$@"
m_exit 0
