#!/usr/bin/env bash
#
# # # # # # # # # 
# SPT-INSTALLER
# # # # # # # # # 

title="spt-installer"
author="MadByte"
license="MIT"
version="0.2.9"
date="2025-08-18"


# We don't want to run as root
if [ "$(id -u)" -eq 0 ]; then
    echo "This script is not supposed to be run as root!"
    exit 1
fi


# Shell options
shopt -s extglob


msg() {
    local output="${gray}[$title]${reset} ${*}"
    local filtered_str=$(echo -e "${output}" | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g')

    # Show in terminal & write to log
    echo -e "${output}"
    echo "${filtered_str}" | tee -a "${log_path}" &>/dev/null
}


err() {
    local status=$?
    local pfx="${bold}${red}ERROR: ${reset}"
    msg "${pfx}$1"
    msg "${pfx}See '${cache_dir}/installer.log' for more details.${reset}"
    m_exit ${status}
}


ask() {
    msg "$* [y/n]"
    while true; do
        read -r -p "> " yn
        case $yn in
            [Yy]*) return 0 ;;  
            [Nn]*) msg "Aborted"; m_exit 0 ;;
        esac
    done
}


m_exec() {
    "$@" &>> "${log_path}"
}


m_exit() {
    local status=${1:-$?}

    # Remove temp files
    [ -d "${tmp_dir}" ] && m_exec rm -r "${tmp_dir}"

    # Exit with passed status code
    exit "${status}"
}


init_paths() {
    # System directories
    app_dir="${HOME}/.local/share/applications"
    ico_dir="${HOME}/.local/share/icons/hicolor/256x256/apps" && mkdir -p "${ico_dir}"
    cache_dir="${XDG_CACHE_HOME:-${HOME}/.cache}/${title}" && mkdir -p "${cache_dir}"
    tmp_dir="${cache_dir}/tmp" && mkdir -p "${tmp_dir}"

    # Prefix directories
    prefix_dir="${prefix_dir:-"${HOME}/Games/tarkov"}"
    spt_dir="${prefix_dir}/drive_c/SPTarkov"
    bsg_dir="${prefix_dir}/drive_c/Battlestate Games"
    eft_dir="${bsg_dir}/Escape from Tarkov"

    # File path variables
    umu_path=$(command -v umu-run || echo "${cache_dir}/umu/umu-run")
    log_path="${cache_dir}/installer.log"
    prefix_config_path="${cache_dir}/prefix.conf"
}


load_prefix_path() {
    # Load prefix path from prefix.conf file or fallback to default path
    local prefix_path="$(cat "${prefix_config_path}" 2>/dev/null || echo "${prefix_dir}")"
    opt_setprefix "${prefix_path}"
}


install_umu() {
    msg "Downloading UMU Launcher..."
    
    # Download zipapp archive
    cd "${tmp_dir}" || exit
    m_exec curl -LO "${umu_launcher_url}" || err "Failed to download UMU from '${umu_launcher_url}'"

    # Extract & remove when done
    m_exec tar -xf "$(ls -- !("zipapp.tar"))" -C "../" || err "Failed to extract UMU"
}


install_tarkov() {
    # Get prefix path (cached/default) and validate it
    load_prefix_path

    if [ ! -d "${prefix_dir}" ]; then
        # Create prefix directory
        msg "Creating prefix directory..."
        m_exec mkdir -p "${prefix_dir}" || err "Failed to create prefix directory"

        # Initialize prefix
        msg "Initializing wine prefix..."
        m_exec "${umu_path}" wineboot -u || err "Failed to initialize the wine prefix"
    fi

    # Install game dependencies
    if ! cat "${prefix_dir}/winetricks.log" 2>/dev/null | grep -q "times"; then
        msg "Installing Fonts..."
        m_exec "${umu_path}" winetricks -q arial times || err "Failed to install dependency"
    fi

    if ! cat "${prefix_dir}/winetricks.log" | grep -q "dotnet48"; then
        msg "Installing .NET 4.8 Runtime (this might take a while)..."
        m_exec "${umu_path}" winetricks -q dotnet48 || err "Failed to install dependency"
    fi

    if ! cat "${prefix_dir}/winetricks.log" | grep -q "vcrun2022"; then
        msg "Installing Microsoft Visual C++ 2015-2022 Redistributable..."
        m_exec "${umu_path}" winetricks -q vcrun2022 || err "Failed to install dependency"
    fi

    # Add prefix update pop-up workaround
    msg "Adding window pop-up workaround..."
    m_exec "${umu_path}" reg add "HKLM\\Software\\Microsoft\\.NETFramework" /v "OnlyUseLatestCLR" /t "REG_DWORD" /d 0001 /f

    # Add mouse focus workaround
    msg "Adding mouse focus workaround to registry..."
    m_exec "${umu_path}" reg add "HKCU\\Software\\Wine\\X11 Driver" /v "UseTakeFocus" /t "REG_SZ" /d "N" /f
    
    # Download BSG Launcher if needed
    if [ ! -f "${cache_dir}/BsgLauncher.exe" ]; then
        msg "Downloading BSG Launcher..."
        (cd "${cache_dir}" && m_exec curl -L "${bsg_installer_url}" -o "BsgLauncher.exe") || err "Failed to download file from '${bsg_installer_url}'."
    fi

    # Install BSG Launcher
    msg "Installing BSG Launcher..."
    m_exec "${umu_path}" "${cache_dir}/BsgLauncher.exe" /VERYSILENT || err "Failed to install BSG Launcher"

    # Re-initialize prefix for GE-Proton
    msg "Switching Proton version to 'GE-Proton'..."
    export PROTONPATH="GE-Proton"
    m_exec "${umu_path}" wineboot -u || err "Failed to initialize the wine prefix"

    # Copy icon to user icons directory
    if [ ! -f "${ico_dir}/tarkov.png" ]; then
        msg "Downloading & installing app icon from SteamGridDB..."
        (cd "${ico_dir}" && m_exec curl -L "https://cdn2.steamgriddb.com/icon/33686c2d8930be81c843ffb7d4312605/32/256x256.png" -o "tarkov.png")
    fi

    # Create application shortcut
    msg "Creating application shortcut..."
    local shortcut_path="${app_dir}/BSG - Launcher.desktop"
    local env_vars=()
    env_vars+=("PROTON_USE_XALIA=0")
    env_vars+=("PROTONPATH='GE-Proton'")
    env_vars+=("WINEPREFIX='${prefix_dir}'")

    local launch_args=()
    launch_args+=("--disable-software-rasterizer")

    # Remove existing shortcut
    [[ -f "${shortcut_path}" ]] && m_exec rm -f "${shortcut_path}"

    # Write desktop file
    {   echo "[Desktop Entry]"
        echo "Categories=Game;ActionGame;Simulation"
        echo "Path=${bsg_dir}/BsgLauncher"
        echo "Exec=env ${env_vars[*]} ${umu_path} 'C:/Battlestate Games/BsgLauncher/BsgLauncher.exe' ${launch_args}"
        echo "Name=BSG - Launcher"
        echo "Icon=tarkov"
        echo "Type=Application"
    } >> "${shortcut_path}"

    # Make executable
    m_exec chmod +x "${shortcut_path}"

    msg "${green}Done! ※\(^o^)/※${reset}"
}


install_spt() {
    # HACK: Needed to run the SPTInstaller.exe
    export DOTNET_BUNDLE_EXTRACT_BASE_DIR=""
    export DOTNET_ROOT=""

    # Get prefix path (cached/default) and validate it
    load_prefix_path

    if  [ ! -d "${prefix_dir}" ]; then
        msg "${yellow}Prefix directory at '${prefix_dir}' does not exist.${reset}"
        msg "Make sure to install EFT first!"
        err "Wine prefix not found"
    elif [ ! -d "${eft_dir}" ]; then
        msg "${yellow}Looks like Escape from Tarkov is not installed.${reset}"
        msg "Make sure to install the game client with the BSG Launcher!"
        err "Tarkov game files not found"
    elif [ -d "${spt_dir}" ]; then
        msg "${yellow}SPTarkov directory already exists.${reset}"
        msg "${yellow}If you want to reinstall, make sure to remove the old installation first!${reset}"
        err "SPTarkov directoy already exists."
    fi

    # Download SPT Installer
    if ! [ -f "${cache_dir}/SPTInstaller.exe" ]; then
        msg "Downloading SPTInstaller.exe..."
        (cd "${cache_dir}" && m_exec curl -LO "${spt_installer_url}") || err "Failed to download file from '${spt_installer_url}'"
    fi

    # Install dependencies
    if ! cat "${prefix_dir}/winetricks.log" 2>/dev/null | grep -q "dotnetdesktop8"; then
        msg "Installing .NET Desktop 8 Runtime..."
        m_exec "${umu_path}" winetricks -q dotnetdesktop8 || err "Failed to install dependency"
    fi

    if ! cat "${prefix_dir}/winetricks.log" | grep -q "dotnetdesktop9"; then
        msg "Installing .NET Desktop 9 Runtime..."
        m_exec "${umu_path}" winetricks -q dotnetdesktop9 || err "Failed to install dependency"
    fi

    # Add DLL overrides
    msg "Adding DLL overrides to registry..."
    m_exec "${umu_path}" reg add "HKCU\\Software\\Wine\\DllOverrides" /v "winhttp" /t "REG_SZ" /d "native,builtin" /f

    # HACK: UMU-Proton fails to run the SPTInstaller, so we have to switch to GE-Proton instead
    export PROTONPATH="GE-Proton"

    # Run SPT Installer
    msg "Launching SPT Installer..."
    m_exec "${umu_path}" "${cache_dir}/SPTInstaller.exe" installpath="C:\\SPTarkov" || err "Failed to launch SPT Installer"

    # Install server launch script
    msg "Installing server launch script..."
    local script_url="https://raw.githubusercontent.com/MadByteDE/SPT-Linux-Guide/refs/heads/SPTv4-dev/scripts/launch-server.sh"

    if [ $(curl --write-out '%{http_code}' --silent --output /dev/null "${script_url}") == "404" ]; then
        err "The remote file does not exist!"
    fi

    (cd "${spt_dir}" && m_exec curl -LO "${script_url}") || err "Failed to install launch script"
    m_exec chmod +x "${spt_dir}/launch-server.sh"

    # Copy icon to user icons directory
    if [ ! -f "${ico_dir}/spt_launcher.png" ] || [ ! -f "${ico_dir}/spt_server.png" ]; then
        msg "Downloading & installing app icons..."
        (cd "${ico_dir}" && m_exec curl -L "https://cdn2.steamgriddb.com/icon_thumb/ddd4f86cd0f978e85155cfa6c9f94e0c.png" -o "spt_launcher.png")
        (cd "${ico_dir}" && m_exec curl -L "https://cdn2.steamgriddb.com/icon_thumb/9f7431ea593b8e57401c08f40adc6e34.png" -o "spt_server.png")
    fi

    # Create application shortcuts
    msg "Creating application shortcuts..."

    # SPT Launcher
    local env_vars=()
    env_vars+=("PROTONPATH='GE-Proton'")
    env_vars+=("PROTON_USE_XALIA=0")
    env_vars+=("DOTNET_BUNDLE_EXTRACT_BASE_DIR=")
    env_vars+=("DOTNET_ROOT=")
    env_vars+=("WINEDEBUG='-all,err+all,fixme+all,debugstr+all'")
    env_vars+=("WINEPREFIX='${prefix_dir}'")

    local launch_args=()

    local shortcut_path="${app_dir}/SPTarkov - Launcher.desktop"

    # Remove existing shortcut
    [ -f "${shortcut_path}" ] && m_exec rm -f "${shortcut_path}"

    # Write desktop file
    {   echo "[Desktop Entry]"
        echo "Categories=Game;ActionGame;Simulation"
        echo "Path=${spt_dir}"
        echo "Exec=env ${env_vars[*]} ${umu_path} 'C:/SPTarkov/SPT.Launcher.exe' ${launch_args}"
        echo "Name=SPTarkov - Launcher"
        echo "Icon=spt_launcher"
        echo "Type=Application"
    } >> "${shortcut_path}" && m_exec chmod +x "${shortcut_path}"
    
    # SPT Server
    local shortcut_path="${app_dir}/SPTarkov - Server.desktop"

    # Remove existing shortcut
    [ -f "${shortcut_path}" ] && m_exec rm -f "${shortcut_path}"

    # Write desktop file
    {   echo "[Desktop Entry]"
        echo "Categories=Game;ActionGame;Simulation"
        echo "Path=${spt_dir}"
        echo "Exec='${spt_dir}/launch-server.sh'"
        echo "Name=SPTarkov - Server"
        echo "Icon=spt_server"
        echo "Type=Application"
    } >> "${shortcut_path}" && m_exec chmod +x "${shortcut_path}"

    msg "${green}Done! ※\(^o^)/※${reset}"
}


opt_setprefix() {
    prefix_dir="${1}"

    if [ -d "${prefix_dir}" ]; then
        [ ! -f "${prefix_dir}/system.reg" ] && err "Invalid prefix directory: '${prefix_dir}'"
    fi

    # Update WINEPREFIX environment variable
    export WINEPREFIX="${prefix_dir}"

    # Update paths
    init_paths

    # Update prefix config file
    echo "${prefix_dir}" > "${prefix_config_path}"
    msg "Prefix path has been set to '${1}'"
}


opt_install() {
    local mode="$1"

    # Install umu-launcher if needed
    [ ! -f "${umu_path}" ] && install_umu

    case "${mode}" in
        eft)
            msg "Launching Escape from Tarkov setup..."
            install_tarkov
        ;;

        spt)
            msg "Launching SPTarkov setup..."
            install_spt
        ;;

        *)
            err "Invalid argument '${mode}'. (Available options: eft, spt)"
        ;;
    esac
}


opt_uninstall() {
    local mode="$1"

    case "${mode}" in
        eft)
            msg "${bold}This action will uninstall 'Escape from Tarkov' from your system!${reset}"
            msg "    > Prefix directory: ${underline}${prefix_dir}${reset}"
            ask "Do you want to continue?"

            msg "Uninstalling 'Escape from Tarkov'..."
            [[ -d "${bsg_dir}" ]] && m_exec rm -r "${bsg_dir}"

            msg "Removing shortcut..."
            local app_path="${app_dir}/BSG - Launcher.desktop"
            [[ -f "${app_path}" ]] && m_exec rm -f "${app_path}"

            msg "${green}Done!${reset}"
        ;;

        spt)
            msg "${bold}This action will uninstall 'SPTarkov' from your system!${reset}"
            msg "    > Prefix directory: ${underline}${prefix_dir}${reset}"
            ask "Do you want to continue?"

            msg "Uninstalling 'SPTarkov'..."
            [[ -d "${spt_dir}" ]] && m_exec rm -r "${spt_dir}"

            msg "Removing shortcut..."
            apps=()
            apps+=("SPTarkov - Launcher.desktop")
            apps+=("SPTarkov - Server.desktop")

            for app in "${apps[@]}"; do
                app_path="${app_dir}/${app}"
                [[ -f "${app_path}" ]] && m_exec rm -f "${app_path}"
            done

            msg "${green}Done!${reset}"
        ;;

        cache)
            msg "Removing Cache directory..."
            [[ -d "${cache_dir}" ]] && m_exec rm -r "${cache_dir}"
            msg "${green}Done!${reset}"
        ;;

        prefix)
            # Warn user before continuing
            msg "${bold}This action will remove the installed wine prefix!${reset}"
            msg "The following directory will be deleted ${bold}permanently${reset}:"
            msg "    > ${underline}${prefix_dir}${reset}"
            msg
            ask "Do you want to continue?"

            msg "Removing Prefix directory..."
            [[ -d "${prefix_dir}" ]] && m_exec rm -r "${prefix_dir}"

            msg "${green}Done!${reset}"
        ;;

        wipe)
            opt_uninstall "eft"
            opt_uninstall "spt"
            opt_uninstall "prefix"
            opt_uninstall "cache"
        ;;

        *)
            err "Invalid argument '${OPTARG}'. (Available options: eft, spt, cache, wipe)"
        ;;
    esac
}


opt_selfupdate() {
    local script_path="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> "${log_path}" && pwd )"
    local update_url="https://raw.githubusercontent.com/MadByteDE/SPT-Linux-Guide/refs/heads/SPTv4-dev/scripts/spt-installer"
    msg "${yellow}Not fully implemented yet${reset}"
    msg
    msg "> The script will attempt to download the latest version available here:"
    msg "> ${underline}${update_url}${reset}"
    msg
    msg "> This feature is ${bold}NOT${reset} fully implemented yet & won't validate the new script file!"
    msg
    ask "Do you want to continue?"
    
    if [ $(curl --write-out '%{http_code}' --silent --output /dev/null "${update_url}") == "404" ]; then
        err "The remote file does not exist!"
    fi

    (cd "${script_path}" && m_exec curl -LO "${update_url}") || err "Failed to update script"
    m_exec chmod +x "${script_path}" || err "Failed to change file permissions"

    msg "${green}Done! ※\(^o^)/※${reset}"
}


opt_help() {
    msg "${bold}Syntax:${reset} ${title} [OPTION][ARGS]"
    msg
    msg "Standalone EFT/SPT installer script that uses UMU and Proton."
    msg "${bold}Example usage: ${yellow}spt-installer -p ~/Games/tarkov -i eft${reset}"
    msg
    msg "${bold}OPTIONS:${reset}"
    msg "   ${bold}-i${reset} (Install)         - Available arguments: eft|spt"
    msg "   ${bold}-u${reset} (Uninstall)       - Available arguments: eft|spt|prefix|cache|wipe"                                       
    msg "   ${bold}-p${reset} (Prefix)          - Set a custom path for the wine prefix"
    msg "   ${bold}--self-update${reset}        - Updates this installer script"
    msg "   ${bold}-h | --help${reset}          - Print this help message"
    msg "   ${bold}-v | --version${reset}       - Print the version info message"
    msg
    msg "For more details and help, visit the 'Linux-Guide' repository or join the SPT Discord server:"
    msg "${bold}  -> https://discord.com/invite/Xn9msqQZan${reset}"
    msg
}


opt_version() {
    msg "${bold}Version: ${reset}${version} (${date})"
    msg "${bold}Author: ${reset}${author}"
    msg "${bold}License: ${reset}${license}"
    msg
    msg "${yellow}[!] This script is made by the SPT community & is NOT offically supported by the mod developers!${reset}"
    msg
    msg "Report bugs over at:"
    msg "${bold}> https://github.com/MadByteDE/SPT-Linux-Guide ${reset}"
}


handle_opts() {
    # Execute commands
    while getopts ":p:i:u:dhv-:" opt; do
        case ${opt} in

            # Prefix option
            p)
                case "${OPTARG}" in
                    -*) msg "Invalid option: -${opt} requires an argument" ;;
                    *) opt_setprefix "${OPTARG}" ;;
                esac
            ;;

            # Install option
            i)
                case "${OPTARG}" in
                    eft|spt) opt_install "${OPTARG}" ;;
                    -*) msg "Invalid option: -${opt} requires an argument" ;;
                    *) err "Invalid argument '${OPTARG}'. (Available options: eft, spt)" ;;
                esac
            ;;

            # Uninstall option
            u)
                case "${OPTARG}" in
                    eft|spt|cache|prefix|wipe) opt_uninstall "${OPTARG}" ;;
                    -*) msg "Invalid option: -${opt} requires an argument" ;;
                    *) err "Invalid argument '${OPTARG}'. (Available options: eft|spt|cache|prefix|wipe)" ;;
                esac
            ;;

            d | debug) debug=1 ;;
            h | help) opt_help ;;
            v | version) opt_version ;;

            -)
                case "${OPTARG}" in
                    self-update) opt_selfupdate ;;
                    debug) debug=1 ;;
                    help) opt_help ;;
                    version) opt_version ;;
                    *)
                        echo "Invalid option: --${OPTARG}"
                        m_exit 1
                    ;;
                esac
            ;;

            \?)
                msg "Invalid option: -${OPTARG}"
                m_exit 1
            ;;

            : )
                msg "Invalid option: -${OPTARG} requires an argument"
            ;;
        esac
    done
}


main() {
    # ANSI codes
    bold="\e[1m"; underline="\e[2m"; reset="\e[0m"
    red="\e[31m"; green="\e[32m"; blue="\e[36m"
    yellow="\e[33m"; gray="\e[90m"

    # Dependency download URLs
    umu_launcher_url="https://github.com/Open-Wine-Components/umu-launcher/releases/download/1.2.9/umu-launcher-1.2.9-zipapp.tar"
    bsg_installer_url="https://prod.escapefromtarkov.com/launcher/download"
    spt_installer_url="https://ligma.waffle-lord.net/SPTInstaller.exe"

    # Initalize directory paths
    init_paths

    # Remove old log file
    [ -f "${cache_dir}/installer.log" ] && m_exec rm -f "${cache_dir}/installer.log"

    # Environment variable
    # TODO: Add `[[ "${debug}" -eq 1 ]] &&` to WINEDEBUG to not always log everything
    export WINEDEBUG="-all,err+all,fixme+all,debugstr+all"
    export WINEPREFIX="${prefix_dir}"

    # Handle command line arguments
    handle_opts "$@"
}

# Main entry
main "$@"
m_exit 0
