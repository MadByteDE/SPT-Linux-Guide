#!/usr/bin/env bash

# # # # # # # # # 
# SPT-INSTALLER #
# # # # # # # # # 

# TODO: Think about splitting the script up and sourcing common functions
# Downside would be less portability :/
TITLE="spt-installer"
AUTHOR="MadByte"
LICENSE="MIT"
VERSION="0.4.0"
DATE="2025-08-21"

# ANSI codes
BOLD="\e[1m"; UNDERLINE="\e[2m"; RESET="\e[0m"
RED="\e[31m"; GREEN="\e[32m"; BLUE="\e[36m"
YELLOW="\e[33m"; GRAY="\e[90m"

# System directories
readonly DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
readonly CACHE_HOME="${XDG_CACHE_HOME:-${HOME}/.cache}"
readonly CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
readonly DATA_DIR="${DATA_HOME}/${TITLE}" && mkdir -p "${DATA_DIR}"
readonly CACHE_DIR="${CACHE_HOME}/${TITLE}" && mkdir -p "${CACHE_DIR}"
readonly CONFIG_DIR="${CONFIG_HOME}/${TITLE}" && mkdir -p "${CONFIG_DIR}"
readonly TMP_DIR="${CACHE_DIR}/tmp" && mkdir -p "${TMP_DIR}"
readonly ICO_DIR="${DATA_HOME}/icons/hicolor/256x256/apps" && mkdir -p "${ICO_DIR}"
readonly APP_DIR="${DATA_HOME}/applications"

# File path variables
readonly LOG_PATH="${CACHE_DIR}/installer.log"
readonly SCRIPT_PATH="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" && pwd )"
readonly UMU_PATH=$(command -v umu-run || echo "${DATA_DIR}/umu-run")
readonly CONFIG_PATH="${CONFIG_DIR}/prefix.conf"
readonly ENV_PATH="${CONFIG_DIR}/env.conf"

declare -A CONFIG
declare -A ENV
declare -a ARGS

# TODO: Maybe move the URLs into a seperate file that will be downloaded at runtime?
# This would allow to update dependencies/URLs without releasing new script versions
declare -A URL
URL[umu-launcher]="https://github.com/Open-Wine-Components/umu-launcher/releases/download/1.2.9/umu-launcher-1.2.9-zipapp.tar"
URL[bsg-launcher]="https://prod.escapefromtarkov.com/launcher/download"
URL[spt-installer]="https://ligma.waffle-lord.net/SPTInstaller.exe"
URL[bsg-launcher-ico]="https://cdn2.steamgriddb.com/icon/33686c2d8930be81c843ffb7d4312605/32/256x256.png"
URL[spt-launcher-ico]="https://cdn2.steamgriddb.com/icon_thumb/ddd4f86cd0f978e85155cfa6c9f94e0c.png"
URL[spt-server-ico]="https://cdn2.steamgriddb.com/icon_thumb/9f7431ea593b8e57401c08f40adc6e34.png"
URL[server-script]="https://raw.githubusercontent.com/MadByteDE/SPT-Linux-Guide/refs/heads/SPTv4-dev/scripts/launch-server.sh"
URL[installer-script]="https://raw.githubusercontent.com/MadByteDE/SPT-Linux-Guide/refs/heads/SPTv4-dev/scripts/spt-installer"
URL[guide-repo]="https://github.com/MadByteDE/SPT-Linux-Guide"
URL[discord]="https://discord.com/invite/Xn9msqQZan"
readonly -A URL

# We don't want to run as root
if [[ "$(id -u)" -eq 0 ]]; then
    echo "This script is not supposed to be run as root!"
    exit 1
fi

# Shell options
shopt -s extglob

# Make sure to throw an error on SIGINT
trap int INT; int() { err "Interrupt received"; }


m_exit() {
    local status
    status=${1:-$?}

    # Remove temp files
    if [[ -d "${TMP_DIR}" ]] && [[ -n $(ls "${TMP_DIR}") ]]; then
        m_rmdir "${TMP_DIR}"
    fi

    # Save configs
    if [[ -d "${CONFIG_DIR}" ]]; then
        save_array env
        save_array config
    fi

    # Exit with passed status code
    exit "${status}"
}


m_chmod() {
    chmod "$@" &>> "${LOG_PATH}" || err "Command \"$*\" failed (status code $?)"
}


m_rm() {
    local path
    path="$1"
    if [[ -d "${path}" ]]; then
        warn "DEBUG: Cannot remove directories. Use \"m_rmdir\" instead."
        exit 1
    fi
    rm --interactive=never "$1" || exit 1
}


m_rmdir() {
    local path
    path="$1"
    if [[ -f "${path}" ]]; then
        warn "DEBUG: Cannot remove files. Use \"m_rm\" instead."
        exit 1
    fi
    case "$path" in
        "/"|"${HOME%/}"|"${CONFIG_HOME%/}"|"${CACHE_HOME%/}"|"${DATA_HOME%/}")
            exit 1
        ;;
        *) rm -r --interactive=never "$1" || exit 1 ;;
    esac
}


m_curl() {
    curl --connect-timeout 30 -f "$@" &>> "${LOG_PATH}" || err "Command \"$*\" failed (status code $?)"
}


m_umu() {
    "${UMU_PATH}" "$@" &>> "${LOG_PATH}" || err "Command \"$*\" failed (status code $?)"
}


msg() {
    local filtered_str output
    output="${GRAY}[$TITLE]${RESET} ${*}"
    filtered_str=$(echo -e "${output}" | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g')

    # Print to terminal
    echo -e "${output}"

    # Write to log file
    if [[ -d "${CACHE_DIR}" ]]; then
        echo "${filtered_str}" &>> "${LOG_PATH}"
    fi
}


warn() {
    local status pfx
    status=$?
    pfx="${BLUE}Warn ${FUNCNAME[1]}: ${RESET}"
    msg "${pfx}$1"
}


err() {
    local status pfx
    status=$?
    pfx="${BOLD}${RED}ERROR ${FUNCNAME[1]}: ${RESET}"
    msg "${pfx}$1"
    msg "${pfx}See \"${LOG_PATH}\" for more details.${RESET}"
    m_exit ${status}
}


ask() {
    printf "${GRAY}[${TITLE}]${RESET} $* [y/n] "
    while true; do
        read -r -p "> " yn
        case $yn in
            [Yy]*) return 0 ;;  
            [Nn]*) msg "Aborted"; m_exit 0 ;;
        esac
    done
}


set_value() {
    local array_name input key value
    array_name="${1}"
    input="${2}" || err "Missing argument: set_value [array_name] [input]"
    # msg "DEBUG: Input is '${input}'"
    key="$(echo "$input" | cut -d '=' -f 1)"
    value="$(echo "${input//["\""]}" | cut -d '=' -f 2-)"
    # Fail if no key is provided
    [[ -z "$key" ]] && err "Failed to set value: Input \"$input\" in \"$array_name\" has no key"
    case "${array_name}" in
        config)
            # Fail if no value is provided
            [[ -z "$value" ]] && err "Failed to set value: Key \"$key\" in \"$array_name\" has no value"
            CONFIG[$key]="${value%/}"
        ;;
        env)
            ENV[$key]="${value%/}"
        ;;
        *) err "Invalid array name: \"$array_name\""
    esac
}


load_array() {
    local array_name path
    array_name="${1}" || err "Missing argument: load_array [array_name]"
    case "$array_name" in
        config) path="${CONFIG_PATH}" ;;
        env) path="${ENV_PATH}" ;;
        *) err "Invalid argument \"$array_name\"";;
    esac
    # Warn if the file does not exist
    if [[ ! -f "$path" ]]; then
        warn "Failed to load \"$path\": File does not exist"
        return
    fi
    # Read lines & load values
    while read line; do
        if $(echo $line | grep -F = &>/dev/null); then
            set_value "$array_name" "$line"
        else err "Cannot load setting \"$line\": Invalid format"; fi
    done < "$path"
}


save_array() {
    local array_name array path
    array_name="${1}" || err "Missing argument: save_array [array_name]"
    declare -A array
    case "${array_name}" in
        config)
            [[ -f "${CONFIG_PATH}" ]] && m_rm "${CONFIG_PATH}"
            for key in ${!CONFIG[@]}; do
                echo "${key}=\"${CONFIG[$key]}\"" >> "${CONFIG_PATH}" || exit 1
            done
        ;;
        env)
            [[ -f "${ENV_PATH}" ]] && m_rm "${ENV_PATH}"
            for key in ${!ENV[@]}; do
                echo "${key}=\"${ENV[$key]}\"" >> "${ENV_PATH}" || exit 1
            done
        ;;
        *) ;;
    esac
}


export_env() {
    for key in "${!ENV[@]}"; do
        export $(echo "$key=${ENV[$key]} ")
    done
}


get_env_string() {
    local env+="WINEPREFIX=\"${CONFIG[pfx_dir]}\""
    for key in "${!ENV[@]}"; do
        local var
        var=$(echo " $key=${ENV[$key]}")
        env+="$var"
    done
    printf "${env}\n"
}


check_dotnet() {
    local status
    # Check for .NET Core and ASP.NET Runtime
    if [[ -z "$(dotnet --list-runtimes 2>/dev/null | grep "AspNet" | grep "9.0")" ]]; then
        msg "${YELLOW}> \"ASP.NET Runtime 9.0\" is not installed on your system${RESET}"
        status=1
    fi
    if [ "$status" = 1 ]; then
        msg "${YELLOW}> Please install all missing dependencies & try again.${RESET}"
        err "Missing dependencies"
    fi
}


install_umu() {
    # Download zipapp archive
    msg "Downloading UMU Launcher..."
    cd "${TMP_DIR}" || exit 1
    m_curl -LO "${URL[umu-launcher]}"

    # Extract & remove when done
    tar -xf "$(ls -- !("zipapp.tar"))" || err "Failed to extract archive"

    # Move umu-run to DATA_DIR
    mv -f "./umu/umu-run" "${DATA_DIR}" || err "Failed to move \"umu-run\" into \"${DATA_DIR}\""
}


install_eft() {
    msg "Started \"Escape from Tarkov\" setup..."
    opt_setprefix "${CONFIG[pfx_dir]}"

    if [[ ! -d "${CONFIG[pfx_dir]}" ]]; then
        # Initialize prefix
        msg "Initializing wine prefix..."
        m_umu wineboot -u || err "Failed to initialize wine prefix"
    fi

    # Install game dependencies
    if ! cat "${CONFIG[pfx_dir]}/winetricks.log" 2>/dev/null | grep -q "dotnet48"; then
        msg "Installing .NET 4.8 Runtime (this might take a while)..."
        m_umu winetricks -q dotnet48
    fi

    if ! cat "${CONFIG[pfx_dir]}/winetricks.log" | grep -q "vcrun2022"; then
        msg "Installing Microsoft Visual C++ 2015-2022 Redistributable..."
        m_umu winetricks -q vcrun2022
    fi

    # Add prefix update pop-up workaround
    msg "Adding window pop-up workaround..."
    m_umu reg add "HKLM\\Software\\Microsoft\\.NETFramework" /v "OnlyUseLatestCLR" /t "REG_DWORD" /d 0001 /f

    # Add mouse focus workaround
    msg "Adding mouse focus workaround to registry..."
    m_umu reg add "HKCU\\Software\\Wine\\X11 Driver" /v "UseTakeFocus" /t "REG_SZ" /d "N" /f
    
    # Download BSG Launcher if needed
    if [[ ! -f "${CACHE_DIR}/BsgLauncher.exe" ]]; then
        msg "Downloading BSG Launcher..."
        cd "${CACHE_DIR}" && m_curl -L "${URL[bsg-launcher]}" -o "BsgLauncher.exe"
    fi

    # Install BSG Launcher
    msg "Installing BSG Launcher..."
    m_umu "${CACHE_DIR}/BsgLauncher.exe" /VERYSILENT

    # Re-initialize prefix for GE-Proton
    msg "Switching Proton version to \"GE-Proton\"..."
    opt_setenv "PROTONPATH=GE-Proton"
    m_umu wineboot -u

    # Copy icon to user icons directory
    if [[ ! -f "${ICO_DIR}/bsg_launcher.png" ]]; then
        msg "Getting app icon from SteamGridDB..."
        cd "${ICO_DIR}" && m_curl -L "${URL[bsg-launcher-ico]}" -o "bsg_launcher.png"
    fi

    # Create application shortcut
    opt_shortcut bsg-launcher

    msg "${GREEN}Done! ※\(^o^)/※${RESET}"
}


install_spt() {
    msg "Started \"SPTarkov\" setup..."

    # Check for dotnet / aspnet dependencies
    # check_dotnet
    
    # Prepare prefix / environment
    opt_setprefix "${CONFIG[pfx_dir]}"

    if  [[ ! -d "${CONFIG[pfx_dir]}" ]]; then
        msg "> ${YELLOW}Prefix directory at \"${CONFIG[pfx_dir]}\" does not exist.${RESET}"
        msg "> ${YELLOW}Make sure to install EFT first!${RESET}"
        err "Wine prefix not found"
    elif [[ -d "${SPT_DIR}" ]]; then
        msg "> ${YELLOW}SPTarkov directory already exists.${RESET}"
        msg "> ${YELLOW}If you want to reinstall, make sure to remove the old installation first!${RESET}"
        err "SPTarkov directory already exists."
    fi

    # Download SPT Installer
    if ! [[ -f "${CACHE_DIR}/SPTInstaller.exe" ]]; then
        msg "Downloading SPTInstaller.exe..."
        cd "${CACHE_DIR}" && m_curl -LO "${URL[spt-installer]}"
    fi

    # Install dependencies
    if ! cat "${CONFIG[pfx_dir]}/winetricks.log" 2>/dev/null | grep -q "dotnetdesktop8"; then
        msg "Installing .NET Desktop 8 Runtime..."
        m_umu winetricks -q dotnetdesktop8
    fi

    if ! cat "${CONFIG[pfx_dir]}/winetricks.log" | grep -q "dotnetdesktop9"; then
        msg "Installing .NET Desktop 9 Runtime..."
        m_umu winetricks -q dotnetdesktop9
    fi

    # Add DLL overrides
    msg "Adding DLL overrides to registry..."
    m_umu reg add "HKCU\\Software\\Wine\\DllOverrides" /v "winhttp" /t "REG_SZ" /d "native,builtin" /f

    # Run SPT Installer
    msg "Launching SPT Installer..."
    m_umu "${CACHE_DIR}/SPTInstaller.exe" installpath="C:\\SPTarkov" || err "Failed to launch SPT Installer"

    # Install server launch script
    cd "${SPT_DIR}" && m_curl -LO "${URL[server-script]}"
    m_chmod +x "${SPT_DIR}/launch-server.sh"

    # Copy icon to user icons directory
    if [[ ! -f "${ICO_DIR}/spt_launcher.png" ]] || [[ ! -f "${ICO_DIR}/spt_server.png" ]]; then
        msg "Getting app icons from SteamGridDB..."
        cd "${ICO_DIR}" && m_curl -L "${URL[spt-launcher-ico]}" -o "spt_launcher.png"
        cd "${ICO_DIR}" && m_curl -L "${URL[spt-server-ico]}" -o "spt_server.png"
    fi

    # Create application shortcuts
    opt_shortcut spt

    msg "${GREEN}Done! ※\(^o^)/※${RESET}"
}


uninstall_eft() {
    local no_prompt
    no_prompt="${1:-$NO_PROMPT}"
    if [[ "${no_prompt}" != 1 ]]; then
        # Warn user before continuing
        msg "${BOLD}This action will uninstall \"Escape from Tarkov\" from your system!${RESET}"
        msg "Prefix directory: ${UNDERLINE}${CONFIG[pfx_dir]}${RESET}"
        ask "Do you want to continue?"
    fi

    msg "Uninstalling \"Escape from Tarkov\"..."
    [[ -d "${BSG_DIR}" ]] && m_rmdir "${BSG_DIR}"

    msg "Removing \"BSG Launcher\" shortcut..."
    app_path="${APP_DIR}/BSG - Launcher.desktop"
    [[ -f "${app_path}" ]] && m_rm "${app_path}"

    [[ "${no_prompt}" != 1 ]] && msg "${GREEN}Done!${RESET}"
}


uninstall_spt() {
    local no_prompt
    no_prompt="${1:-$NO_PROMPT}"
    if [[ "${no_prompt}" != 1 ]]; then
        msg "${BOLD}This action will uninstall \"SPTarkov\" from your system!${RESET}"
        msg "Prefix directory: ${UNDERLINE}${CONFIG[pfx_dir]}${RESET}"
        ask "Do you want to continue?"
    fi

    msg "Uninstalling \"SPTarkov\"..."
    [[ -d "${SPT_DIR}" ]] && m_rmdir "${SPT_DIR}"

    msg "Removing \"SPTarkov\" shortcuts..."
    local apps app_path
    apps=("SPTarkov - Launcher.desktop" "SPTarkov - Server.desktop")
    for app in "${apps[@]}"; do
        app_path="${APP_DIR}/${app}"
        [[ -f "${app_path}" ]] && m_rm "${app_path}"
    done

    [[ "${no_prompt}" != 1 ]] && msg "${GREEN}Done!${RESET}"
}


opt_setprefix() {
    local path
    path="${1}"

    if [[ -d "${path}" ]]; then
        [[ ! -f "${path}/system.reg" ]] && err "Invalid prefix directory: \"${path}\""
    fi
        
    # Update WINEPREFIX environment variable
    export WINEPREFIX="${path}"

    # Update prefix config
    set_value config "pfx_dir=${path}"

    # Update prefix paths
    SPT_DIR="${CONFIG[pfx_dir]%/}/${CONFIG[spt_dir]%/}"
    BSG_DIR="${CONFIG[pfx_dir]%/}/${CONFIG[bsg_dir]%/}"

    msg "Prefix path has been set to \"${CONFIG[pfx_dir]}\""
}


opt_setenv() {
    local string key value
    string="$1"
    key=$(echo "$string" | cut -d "=" -f1)
    value=$(echo "$string" | cut -d "=" -f 2-)
    set_value env "$key=$value"
    # Export to use in current session
    export_env
}


opt_setarg() {
    local arg args_string
    arg="${1}"
    args_string="${ARGS[*]}"
    case "$args_string" in
     *"$arg"*) ;;
     *)
        msg "Adding arg \"$arg\""
        ARGS+=("$arg")
     ;;
    esac
}


opt_install() {
    # SYNTAX: spt-additions install spt -p ~/Games/sptarkov
    local option="$1" && shift

    while getopts ":p:e:a:h:-" subopt; do
        case ${subopt} in
            p) set_value config "pfx_dir=${OPTARG}";;
            e) opt_setenv "${OPTARG}";;
            a) opt_setarg "${OPTARG}";;
            h) opt_help "install";;
            -*)
                case "${OPTARG}" in
                    help) opt_help "install";;
                    *) err "Invalid option: --${OPTARG}" ;;
                esac
            ;;
        esac
    done
    
    case "${option}" in
        eft)
            # Launch setup
            install_eft
        ;;
        spt)
            # Launch setup
            install_spt
        ;;
        *) err "Invalid argument \"${option}\". (Available options: eft|spt)" ;;
    esac
}


opt_uninstall() {
    # SYNTAX: spt-additions uninstall spt -p ~/Games/sptarkov
    local option="$1" && shift

    while getopts ":p:h:-:" subopt; do
        case ${subopt} in
            p) opt_setprefix "${OPTARG}";;
            h) opt_help "uninstall" ;;
            -)
                case "${OPTARG}" in
                    help) opt_help "uninstall";;
                    no-prompt) export NO_PROMPT=1; msg "\"NO_PROMPT\" option set" ;;
                    *) err "Invalid option: --${OPTARG}" ;;
                esac
            ;;
        esac
    done
    
    case "${option}" in
        eft) uninstall_eft ;;
        spt) uninstall_spt ;;
        all)
            if ! [ "${NO_PROMPT}" = 1 ]; then
                # Warn user before continuing
                msg "${BOLD}This action will remove the installed wine prefix!${RESET}"
                msg "The following directory will be deleted ${BOLD}permanently${RESET}:"
                msg "${UNDERLINE}${CONFIG[pfx_dir]}${RESET}"
                ask "Do you want to continue?"
            fi

            uninstall_eft 1
            uninstall_spt 1

            msg "Removing Prefix directory..."
            [[ -d "${CONFIG[pfx_dir]}" ]] && m_rmdir "${CONFIG[pfx_dir]}"
            [[ "${NO_PROMPT}" != 1 ]] && msg "${GREEN}Done!${RESET}"
        ;;
        *) err "Invalid option \"${option}\"" ;;
    esac
}


opt_run() {
    # SYNTAX: spt-additions run spt --launcher -e "" -a ""
    local option path spt_mode
    option="$1" && shift

    while getopts ":p:e:a:h:-:" subopt; do
        case ${subopt} in
            p) set_value config "pfx_dir=${OPTARG}";;
            e) opt_setenv "${OPTARG}";;
            a) opt_setarg "${OPTARG}";;
            h) opt_help "run" ;;
            -*)
                case "${OPTARG}" in
                    help) opt_help "run";;
                    launcher|server) spt_mode="${OPTARG}" ;;
                    *) err "Invalid option: --${OPTARG}" ;;
                    "") err "Option \"${option}\" requires an argument" ;;
                esac
            ;;
            *) err "Invalid option \"${subopt}\"" ;;
        esac
    done
    
    case "${option}" in
        eft|bsg|bsg-launcher)
            # HACK: Workaround for getting the BSG Launcher working
            opt_setarg "--disable-software-rasterizer"
            opt_setprefix "${CONFIG[pfx_dir]}"
            cd "${BSG_DIR}/BsgLauncher"
            m_umu "BsgLauncher.exe" "${ARGS[*]}" &
        ;;
        spt-launcher)
            opt_setprefix "${CONFIG[pfx_dir]}"
            cd "${SPT_DIR}" && m_umu SPT.Launcher.exe "${ARGS[*]}" &
        ;;
        spt-server)
            # check_dotnet
            opt_setprefix "${CONFIG[pfx_dir]}"
            "./launch-server.sh" "${ARGS[*]}" &
        ;;
        "") err "Option \"run\" requires an argument" ;;
        *) err "Invalid option \"${option}\"" ;;
    esac
}


opt_patch() {
    # spt-additions patch -d ~/Games/sptarkov/drive_c/SPTarkov
    # spt-additions patch (saved pfx + default spt directory)
    msg "Option \"patch\" is not implemented yet"
}


opt_shortcut() {
    # SYNTAX: spt-additions shortcut spt --launcher -p "" -e "" -a ""
    local option
    local name executable working_dir path icon
    option="$1" && shift

    while getopts ":p:e:a:h:-:" subopt; do
        case ${subopt} in
            p) opt_setprefix "${OPTARG}";;
            e) opt_setenv "${OPTARG}";;
            a) opt_setarg "${OPTARG}";;
            h) opt_help "shortcut" ;;
            -*)
                case "${OPTARG}" in
                    help) opt_help "shortcut";;
                    launcher|server) spt_mode="${OPTARG}" ;;
                    *) err "Invalid option: --${OPTARG}" ;;
                esac
            ;;
            *) err "Invalid option \"${subopt}\"" ;;
        esac
    done
    
    case "${option}" in
        eft|bsg|bsg-launcher)
            # HACK: Workaround for getting the BSG Launcher working
            opt_setarg "--disable-software-rasterizer"
            name="BSG - Launcher"
            executable="BsgLauncher.exe"
            working_dir="${BSG_DIR}/BsgLauncher"
            path="${APP_DIR}/$name.desktop"
            icon="bsg_launcher"
        ;;
        spt-launcher)
            executable="SPT.Launcher.exe"
            working_dir="${SPT_DIR}"
            name="SPT - Launcher"
            path="${APP_DIR}/$name.desktop"
            icon="spt_launcher"
        ;;
        spt-server)
            executable="launch-server.sh"
            working_dir="${SPT_DIR}"
            name="SPT - Server"
            path="${APP_DIR}/$name.desktop"
            icon="spt_server"
        ;; 
        spt|sptarkov)
            opt_shortcut spt-launcher
            opt_shortcut spt-server
            return
        ;;
        all)
            opt_shortcut bsg-launcher
            opt_shortcut spt-launcher
            opt_shortcut spt-server
            return
        ;;
        *) err "Invalid option \"${option}\"" ;;
    esac

    # Create shortcut
    local env=$(get_env_string)
    msg "Creating \"$name\" shortcut..."

    # Remove existing shortcut
    [[ -f "${path}" ]] && m_rm "${path}"

    local exec_string
    case "$executable" in
        *exe*|*bat*|*msi*) exec_string="Exec=env $env $UMU_PATH \"$executable\" ${ARGS[*]}" ;;
        *) exec_string="Exec=\"${working_dir}/$executable\" ${ARGS[*]}" ;;
    esac

    # Write desktop file
    {   echo "[Desktop Entry]"
        echo "Categories=Game;ActionGame;Simulation"
        echo "Path=$working_dir"
        echo "${exec_string}"
        echo "Name=$name"
        echo "Icon=$icon"
        echo "Type=Application"
    } > "${path}" && m_chmod +x "${path}"
}


opt_clean() {
    # SYNTAX: spt-installer clean all --no-prompt
    local option="$1" && shift

    while getopts ":p:h:-" subopt; do
        case ${subopt} in
            p) opt_setprefix "${OPTARG}";;
            h) opt_help "clean" ;;
            -)
                case "${OPTARG}" in
                    help) opt_help "clean";;
                    no-prompt) export NO_PROMPT=1; msg "\"NO_PROMPT\" option set" ;;
                    *) err "Invalid option: --${OPTARG}" ;;
                esac
            ;;
        esac
    done

    case "${option}" in
        cache)
            msg "Removing Cache directory..."
            [[ -d "${CACHE_DIR}" ]] && m_rmdir "${CACHE_DIR}"
            [[ "${NO_PROMPT}" != 1 ]] && msg "${GREEN}Done!${RESET}"
        ;;
        config)
            msg "Removing config directory..."
            [[ -d "${CONFIG_DIR}" ]] && m_rmdir "${CONFIG_DIR}"
            [[ "${NO_PROMPT}" != 1 ]] && msg "${GREEN}Done!${RESET}"
        ;;
        data)
            msg "Removing data directory..."
            [[ -d "${DATA_DIR}" ]] && m_rmdir "${DATA_DIR}"
            [[ "${NO_PROMPT}" != 1 ]] && msg "${GREEN}Done!${RESET}"
        ;;
        all)
            if [[ "${NO_PROMPT}" != 1 ]]; then
                # Warn user before continuing
                msg "${BOLD}This action will remove the SPT/EFT wine prefix, all cached files & all game shortcuts!${RESET}"
                msg "The following directories will be deleted ${BOLD}permanently${RESET}:"
                msg "    > ${UNDERLINE}${CONFIG[pfx_dir]}${RESET}"
                msg "    > ${UNDERLINE}${DATA_DIR}${RESET}"
                msg "    > ${UNDERLINE}${CACHE_DIR}${RESET}"
                msg "    > ${UNDERLINE}${CONFIG_DIR}${RESET}"
                ask "Do you want to continue?"
            fi
            export NO_PROMPT=1
            opt_uninstall all 1
            opt_clean data
            opt_clean config
            opt_clean cache
            msg "${GREEN}Done!${RESET}"
        ;;
        *)
            err "Invalid option \"${option}\". (Available options: cache|config|data|all)"
        ;;
    esac
}


opt_selfupdate() {
    if [[ "${NO_PROMPT}" != 1 ]]; then
        msg "> The script will attempt to download the latest VERSION available here:"
        msg "> ${UNDERLINE}${URL[installer-script]}${RESET}"
        msg
        msg "> This feature is ${BOLD}NOT${RESET} fully implemented yet & won't validate the new script file!"
        msg
        ask "Do you want to continue?"
    fi
    msg "Updating script..."
    cd "${SCRIPT_PATH}" && m_curl -LO "${URL[installer-script]}"
    m_chmod +x "${SCRIPT_PATH}"
    [[ "${no_prompt}" != 1 ]] && msg "${GREEN}Done! ※\(^o^)/※${RESET}"
}


opt_help() {
    # spt-additions help uninstall
    local option="${1}"
    case "${option}" in
        install) ;;
        uninstall) ;;
        shortcut) ;;
        run) ;;
        # patch) ;;
        clean) ;;
        "")
            msg "Standalone EFT/SPT installer script using UMU-Launcher and Proton."
            msg "${BOLD}Example usage: ${YELLOW}spt-installer install eft -p ~/Games/tarkov${RESET}"
            msg
            msg "${BOLD}OPTIONS:${RESET}"
            msg "   ${BOLD}install${RESET}          - Available arguments: eft|spt"
            msg "   ${BOLD}uninstall${RESET}        - Available arguments: eft|spt|all"
            msg "   ${BOLD}shortcut${RESET}         - Available arguments: eft|spt|all"
            msg "   ${BOLD}run${RESET}              - Run EFT/SPT directly from a prefix"
            # msg "   ${BOLD}patch${RESET}                - "
            msg "   ${BOLD}clean${RESET}            - Available arguments: data|cache|config|all"
            msg "   ${BOLD}-p${RESET} (Prefix)      - Set a custom path for the wine prefix"
            msg "   ${BOLD}--self-update${RESET}    - Updates this installer script"
            msg "   ${BOLD}--no-prompt${RESET}      - Disable interactive prompt messages"
            msg "   ${BOLD}-h | --help${RESET}      - Print this help message"
            msg "   ${BOLD}-v | --VERSION${RESET}   - Print the VERSION info message"
            msg
            msg "${YELLOW}[!] This script is made by the SPT community & is NOT offically supported by the mod developers!${RESET}"
            msg
            msg "For more details and help, visit:"
            msg "  > ${BOLD}${URL[guide-repo]}${RESET}"
            msg
            msg "Join the SPT Discord server:"
            msg "  > ${BOLD}${URL[discord]}${RESET}"
        ;;
        *) msg "Invalid argument: ${option}. Available arguments: install|uninstall|shortcut|run|patch|clean" ;;
    esac
}


opt_version() {
    msg "${BOLD}Version: ${RESET}${VERSION} (${DATE})"
    msg "${BOLD}Author: ${RESET}${AUTHOR}"
    msg "${BOLD}License: ${RESET}${LICENSE}"
}


handle_opts() {
    local option
    option="${1}" && shift

    case "$option" in
        install) opt_install "$@" ;;
        uninstall) opt_uninstall "$@" ;;
        run) opt_run "$@" ;;
        # patch) opt_patch "$@" ;;
        shortcut) opt_shortcut "$@" ;;
        clean) opt_clean "$@" ;;
        self-update) opt_selfupdate ;;
        version) opt_version ;;
        help) opt_help "$@";;
        --*)
            case "$option" in
                --self-update) opt_selfupdate ;;
                --version) opt_version ;;
                --help) opt_help ;;
                *) err "Invalid option: ${option}" ;;
            esac
        ;;
        -*)
            case "$option" in
                -v) opt_version ;;
                -h) opt_help ;;
                *) err "Invalid option: ${option}" ;;
            esac
        ;;
        "") opt_help ;;
        *) err "Invalid option: ${option}" ;;
    esac
}


main() {
    # Set default config variables
    set_value config "pfx_dir=${HOME}/Games/tarkov"
    set_value config "spt_dir=drive_c/SPTarkov"
    set_value config "bsg_dir=drive_c/Battlestate Games"

    # Set default environment variables
    set_value env "PROTON_USE_XALIA=0"
    set_value env "DOTNET_ROOT="
    set_value env "DOTNET_BUNDLE_EXTRACT_BASE_DIR="
    set_value env "MANGOHUD_CONFIG=preset=3"
    # set_value env "WINEDEBUG=-all,err+all,fixme+all,debugstr+all"

    # Remove old log file
    [[ -f "${LOG_PATH}" ]] && m_rm "${LOG_PATH}"

    # Load config files
    [[ -f "${CONFIG_PATH}" ]] && load_array config
    [[ -f "${ENV_PATH}" ]] && load_array env

    # Set prefix path
    SPT_DIR="${CONFIG[pfx_dir]%/}/${CONFIG[spt_dir]%/}"
    BSG_DIR="${CONFIG[pfx_dir]%/}/${CONFIG[bsg_dir]%/}"

    # Export env vars from config
    export_env

    # HACK: Just for debugging purposes rn
    export WINEDEBUG="-all,err+all,fixme+all,debugstr+all"

    # Install umu-launcher if needed
    [[ ! -f "${UMU_PATH}" ]] && install_umu 

    # Handle command line arguments
    handle_opts "$@"
}

# Main entry
main "$@"

m_exit 0
